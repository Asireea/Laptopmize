{
    "MSI MEG X670E ACE": {
        "type": "motherboard",
        "customizable": "false",
        "dependencies": {
                            "CPU": ["Apple M4 (10‑core)", "AMD Ryzen 5 3600", "AMD Ryzen 7 7700"],
                            "GPU": ["Apple GPU (10‑core)", "AMD Radeon RX 9060 XT", "AMD Radeon 7800 XT"]
                        }

    }
}


{
    "motherboards": 
    {
        "Apple MSI MEG X670E ACE":
        {
            "CPU": 
            {   
                "customizable": true,
                "multipleComponents": 0,
                "values": ["Apple M4 (10‑core)", "Intel Xeon W-3223", "Intel Xeon W-3265M", "Intel Xeon W-3225"]
            },
            "GPU":
            {   
                "customizable": true,
                "multipleComponents": 0,
                "values": ["Apple GPU (10‑core)", "AMD Radeon Pro W5500X", "AMD Radeon Pro Vega II Duo", "AMD Radeon RX 6800 XT"]
            },
            "RAM":
            {
                "customizable": true,
                "multipleComponents": 4,
                "values": ["Corsair Vengeance 32GB DDR5 6000MHz CL38 Dual Channel", "Patriot Viper Venom 32GB DDR5 6000MHz CL36 Dual Channel",
                            "Lexar THOR OC 32GB DDR5 6000MHz CL38 Dual Channel", "Lexar ARES Black 32GB DDR5 6000MHz CL32 Dual Channel"]
            },
            "STORAGE":
            {
                "customizable": true,
                "multipleComponents": 2,
                "values": ["SSD Samsung 990 Pro", "SSD WD Black SN850X", "SSD Crucial T700", "SSD Seagate FireCuda 540", 
                            "SSD Corsair MP700 Pro SE", "HDD Seagate Barracuda", "HDD Toshiba X300", "HDD Seagate IronWolf"]
            },
            "OS":
            {
                "customizable": false,
                "multipleComponents": 0,
                "values": ["Windows 11", "Windows 10", "Ubuntu", "Arch Linux", "Fedora Linux", "Manjaro Linux",
                            "NixOS", "ChromeOS", "MS DOS"]
            }
        },

        "ASUS ROG Strix Z790-E Gaming":
        {
            "CPU": 
            {   
                "customizable": true,
                "multipleComponents": 0,
                "values": ["Apple M4 (10‑core)", "AMD Ryzen 7 7700"]
            },
            "GPU":
            {   
                "customizable": true,
                "multipleComponents": 0,
                "values": ["AMD Radeon RX 9060 XT", "AMD Radeon RX 6500 XT", "NVIDIA GeForce GTX 1650 Super", 
                            "AMD Radeon RX 6700 XT", "NVIDIA GeForce RTX 4070", "AMD Radeon RX 7800 XT", 
                            "Intel Arc A380", "AMD Radeon RX 6650 XT", "NVIDIA GeForce RTX 3060"]
            },
            "RAM":
            {
                "customizable": true,
                "multipleComponents": 2,
                "values": ["Corsair Vengeance 32GB DDR5 6000MHz CL38 Dual Channel", 
                            "Lexar THOR OC 32GB DDR5 6000MHz CL38 Dual Channel", "Lexar ARES Black 32GB DDR5 6000MHz CL32 Dual Channel"]
            },
            "STORAGE":
            {
                "customizable": true,
                "multipleComponents": 2,
                "values": ["SSD Samsung 990 Pro", "SSD WD Black SN850X", 
                            "SSD Corsair MP700 Pro SE", "HDD Seagate Barracuda"]
            },
            "OS":
            {
                "customizable": true,
                "multipleComponents": 0,
                "values": ["Windows 11", "Windows 10", "Arch Linux", "Fedora Linux", "Manjaro Linux",
                            "NixOS"]
            }
        },

        "Gigabyte X670E AORUS Master":
        {
            "CPU": 
            {   
                "customizable": true,
                "multipleComponents": 0,
                "values": ["AMD Ryzen 5 3600", "AMD Ryzen 7 7700"]
            },
            "GPU":
            {   
                "customizable": true,
                "multipleComponents": 0,
                "values": ["Apple GPU (10‑core)", "AMD Radeon 7800 XT"]
            },
            "RAM":
            {
                "customizable": true,
                "multipleComponents": 2,
                "values": ["Corsair Vengeance 32GB DDR5 6000MHz CL38 Dual Channel", "Patriot Viper Venom 32GB DDR5 6000MHz CL36 Dual Channel",
                            "Lexar THOR OC 32GB DDR5 6000MHz CL38 Dual Channel"]
            },
            "STORAGE":
            {
                "customizable": true,
                "multipleComponents": 1,
                "values": ["SSD Corsair MP700 Pro SE", "HDD Seagate Barracuda", "HDD Toshiba X300", "HDD Seagate IronWolf"]
            },
            "OS":
            {
                "customizable": true,
                "multipleComponents": 0,
                "values": ["Windows 11", "Windows 10", "Ubuntu", "Arch Linux", "Fedora Linux", "Manjaro Linux",
                            "NixOS", "ChromeOS", "MS DOS"]
            }
        }
    },

    "CPUs":
    {
        "Apple M4 (10‑core)":
        {
            "customizable": true,
            "dependencies": 
            {
                "MOTHERBOARD": ["MSI MEG X670E ACE"],
                "GPU": ["Apple GPU (10‑core)"],
                "RAM": ["Corsair Vengeance 32GB DDR5 6000MHz CL38 Dual Channel", 
                        "Patriot Viper Venom 32GB DDR5 6000MHz CL36 Dual Channel"],
                "OS": ["macOS"]
            }
        },
        "AMD Ryzen 5 3600":
        {
            "customizable": true,
            "dependencies":
            {
                "MOTHERBOARD":["Gigabyte Z790 AORUS Master", "ASUS ROG Strix Z790-E Gaming", "Gigabyte X670E AORUS Master",
                                "ASUS ROG Crosshair X670E Hero"],
                "GPU": ["AMD Radeon RX 6500 XT", "NVIDIA GeForce GTX 1650 Super", "AMD Radeon RX 6700 XT", "NVIDIA GeForce RTX 4070",
                        "AMD Radeon RX 7800 XT", "Intel Arc A380", "AMD Radeon RX 6650 XT", "NVIDIA GeForce RTX 3060"],
                "RAM": ["G.Skill Ripjaws V DDR4-3600", "TeamGroup T-Force Vulcan Z DDR4-3200", "Corsair Vengeance LPX DDR4-3200",
                        "TeamGroup T-Force Vulcan Z DDR4-3200", "Corsair Vengeance RGB Pro DDR4-3600"]
            }
        }
    }
}


{
    "itemGroup1":
    {
        "customizable":false,
        "itemName":
        {
            "dependencies":
            {
                "component":
                {
                    "multipleComponents": 1,
                    "values": []
                }
            }

        }
    }

    "itemGroup2":
    {
        "customizable": false
    }

}


 "OS":
    {
        "customizable": true,
        "items":
        [
            {
                "name": "macOS",
                "dependencies": 
                {
                    "Motherboard":
                    {
                        "customizable": false,
                        "multipleComponents": 1,
                        "values": ["Apple MSI MEG X670E ACE"]
                    }
                }
            }
        ]
    }





<motherboards>
        <MOTHERBOARD src="components/Apple-MSI-MEG-X670E-ACE.jpg" nume="Apple MSI MEG X670E ACE">
            <specificatii>
                <Socket>Apple</Socket>
                <MemorySupport>4× DDR5 DIMM slots</MemorySupport>
                <Networking>Wi-Fi 6E</Networking>
                <Bluetooth>Bluetooth 5.3</Bluetooth>
                <storage>2× M.2 slots</storage>
            </specificatii>
        </MOTHERBOARD>

        <MOTHERBOARD src="components/ASUS-ROG-Strix-Z790-E-Gaming.jpg" nume="ASUS ROG Strix Z790-E Gaming">
            <specificatii>
                <Socket>AMD</Socket>
                <MemorySupport>2× DDR5 DIMM slots</MemorySupport>
                <Networking>Wireless: Intel Wi‑Fi 6E &amp; Ethernet: 2.5 Gb Intel LAN</Networking>
                <Bluetooth>X</Bluetooth>
                </STORAGE>4× SATA 6 Gb/s ports</STORAGE>
            </specificatii>
        </MOTHERBOARD>
    </motherboards>







        <OS>
            <specificatii>
                <Name></Name>
                <ReleaseYear></ReleaseYear>
                <TargetAudience></TargetAudience>
                <EaseOfUse></EaseOfUse>
                <SystemRequirements></SystemRequirements>
            </specificatii>
        </OS>









    //console.log(itemCookie);
/*
    if(existentCookie == null)
    {
        isItemInCart = false;
    }
    else
    {
        existentCookie = JSON.parse(existentCookie);

        for(spec in itemCookie.details)
        {
            if(itemCookie.details[spec] !== existentCookie[0].details[spec])
            {
                isItemInCart = false;
                break;
            }
        }
    }

    if(isItemInCart == true)
    {
        itemCookie.itemCount++;
    }
    else
    {
        itemCookie.itemCount = 
    }


    if(existentCookie)
    {
        existentCookie = JSON.parse(existentCookie);

        for(spec in itemCookie.details)
        {
            if(itemCookie.details[spec] !== existentCookie[0].details[spec])
            {
                isItemInCart = true;
                break;
            }
        }
    }
    

    if(isItemInCart == false)
    {
        setCookie("cartItems", JSON.stringify([itemCookie]), 7);
    }
    else
    {

        existentCookie[0].itemCount++;
        setCookie("cartItems", JSON.stringify([existentCookie[0]]), 7);
        
    }
*/



let itemBox = document.createElement("div");
    itemBox.classList.add("itemBox");

    let laptopIconLink = document.createElement("a");
    laptopIconLink.classList.add("laptopIconLink");

    let imgIcon = document.createElement("img");
    imgIcon.classList.add("imgIcon");

    laptopIconLink.appendChild(imgIcon);
    itemBox.appendChild(laptopIconLink);

    let specsUl = document.createElement("ul");
    specsUl.classList.add("specsUl");
    itemBox.appendChild(specsUl);

    let rightSideButtonsContainer = document.createElement("div");
    rightSideButtonsContainer.classList.add("rightSideButtonsContainer");
    itemBox.appendChild(rightSideButtonsContainer);

    let cancelButton = document.createElement("div");
    cancelButton.classList.add("cancelButton");
    rightSideButtonsContainer.appendChild(cancelButton);

    let counterContainer = document.createElement("div");
    counterContainer.classList.add("counterContainer");
    rightSideButtonsContainer.appendChild(counterContainer);

    let moreButton = document.createElement("div");
    moreButton.classList.add("moreButton");

    let countDisplay = document.createElement("div");
    countDisplay.classList.add("countDisplay");

    let lessButton = document.createElement("div");
    lessButton.classList.add("lessButton");

    counterContainer.appendChild(moreButton);
    counterContainer.appendChild(countDisplay);
    counterContainer.appendChild(lessButton);




function buildItemBox()
{
    




/*
    getItemCartCookies("cartItems").forEach(itemInCart => {
        let itemObj = JSONtoObject(itemInCart);

        let detailsObj = itemObj.details;
        for(let key in detailsObj)
        {
            //let cheie = key;
            //let value = detailsObj[key];

            let liElement = document.createElement("li");

            let strongElementFromLi = document.createElement("strong");
            let spanElementFromLi = document.createElement("span");

            
        }
    });
*/
}

buildItemBox();




'#174e91';













// ----------------- IF THERE IS NO ITEM IN THE SHOPPING CART ----------------- //

    else if(cartCount == 0)
    {
        let canvashtml = document.createElement("canvas");
        document.querySelector("body").appendChild(canvashtml);
        canvashtml.classList.add("canvasHTML");

    
        const canvas = document.querySelector("canvas");
        const ctx = canvas.getContext("2d");

        function sizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }

        sizeCanvas();

        const letters = "ABCDEFGHIJKLMNOPQRSTUVXYZ".split("");
        let fontSize = 28;
        ctx.font = fontSize + "px monospace";
        ctx.textBaseline = "top";
        ctx.textAlign = "start";

        let columns = Math.floor(canvas.width / fontSize);
        let drops = Array.from({ length: columns }, () =>
          Math.floor(Math.random() * canvas.height / fontSize)
        );

        const message = "your shopping cart is empty".toUpperCase();

        let messageCols = Math.floor((columns - message.length) / 2);
        let ground = new Array(columns).fill(null);

        // ---- Image loading (attach handlers BEFORE setting src) ----
        const img = new Image();
        let imageReady = false;

        img.onload = function () {
            imageReady = true;
            recalcLayout(true); // recalc with actual image size; reset drops/ground so formation happens at the right Y
        };

        img.onerror = function () {
            console.error("Failed to load image. Check the path!");
        };

        img.src = "images/russified-tux.png"; // img path
        if (img.complete && img.naturalWidth) {
            // handle instant cache load
            imageReady = true;
        }

        // ---- Layout state ----
        let maxImgWidth = 300;
        let imgWidth = 0,
            imgHeight = 0,
            imgY = 0;
        let messageY = 0; // top of the text row (since textBaseline='top')

        function resetDropsAndGround() {
            columns = Math.floor(canvas.width / fontSize);
            drops = Array.from({ length: columns }, () =>
            Math.floor(Math.random() * canvas.height / fontSize)
            );
            ground = new Array(columns).fill(null);
            messageCols = Math.max(0, Math.floor((columns - message.length) / 2));
        }

        function recalcLayout(reset = false) 
        {
          // If image known, scale it; otherwise treat height as 0 so the message sits centered by itself
            if (imageReady && img.width > 0) 
            {
                const scale = Math.min(1, maxImgWidth / img.width);
                imgWidth = img.width * scale;
                imgHeight = img.height * scale;
            } 
            else 
            {
            imgWidth = 0;
            imgHeight = 0;
            }

            const spacing = 20;
            // Total block height = (image if present) + spacing (if image present) + one text row
            const hasImage = imageReady && imgWidth > 0;
            const blockHeight = (hasImage ? imgHeight + spacing : 0) + fontSize;

            const startY = Math.max(0, (canvas.height - blockHeight) / 2);

            imgY = startY;
            messageY = hasImage ? imgY + imgHeight + spacing : startY;

            if (reset) resetDropsAndGround();
        }

        recalcLayout(true);

        window.addEventListener("resize", () => 
            {
            sizeCanvas();
            ctx.font = fontSize + "px monospace";
            recalcLayout(true); // re-center and restart the effect on resize
            });

        // ---- Draw loop ----
        function draw() 
        {
            // Faint white fade to create trails
            ctx.fillStyle = "rgba(255,255,255,0.1)";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
        
            // Falling letters
            for (let i = 0; i < drops.length; i++) 
            {
                const x = i * fontSize;
                const y = drops[i] * fontSize;
            
                const withinMessageCols = i >= messageCols && i < messageCols + message.length;
            
                const targetChar = withinMessageCols
                    ? message[i - messageCols]
                    : null;
            
                if (ground[i]) 
                {
                    // already locked into the message row
                    ctx.fillStyle = '#174e91';
                    ctx.fillText(ground[i], x, messageY);
                    continue;
                }
            
                // draw falling random letter
                const ch = letters[Math.floor(Math.random() * letters.length)];
                ctx.fillStyle = '#174e91';
                ctx.fillText(ch, x, y);
                
                let speed = 0.5; // smaller = slower, bigger = faster
                drops[i] += speed;
            
                // Lock into the message row when crossing it
                if (y >= messageY) 
                {
                    if (targetChar) 
                        {
                    ground[i] = targetChar;
                    }
                    drops[i] = Math.floor(Math.random() * -20);
                }
            }

            // Draw image last (above rain and text)
            if (imageReady && imgWidth > 0) 
            {
                const imgX = (canvas.width - imgWidth) / 2;
                ctx.drawImage(img, imgX, imgY, imgWidth, imgHeight);
            }

            requestAnimationFrame(draw);
        } // end function draw()

        requestAnimationFrame(draw);

    } // end else if(cartCount == 0)